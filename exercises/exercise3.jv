// 1. This Jayvee model describes a pipeline 
// from a CSV file in the web 
// to a SQLite file sink.
pipeline WordPipeline {

  // 2. We describe the structure of the pipeline,
  // usually at the top of the pipeline.
  // by connecting blocks via pipes. 
  // 3. Syntax of a pipe
  // connecting the block CarsExtractor
  // with the block CarsTextFileInterpreter.
  // 4. The output of the preceding block is hereby used 
  // as input for the succeeding block.

  // 5. Pipes can be further chained, 
  // leading to an overview of the pipeline.
  WordExtractor
    -> WordCellsTextXLSXInterpreter
    -> WordCellsSheetpicker
    -> WorldCellRangeSelector
    -> NameHeaderWriter
    -> BondIssuanceTableInterpreter
    -> bondIssuanceLoader;
    
    NameHeaderWriter
    -> GdpPerCapitaTableInterpreter
    -> GdpPerCapitaLoader;

  // 6. Below the pipes, we usually define the blocks 
  // that are connected by the pipes.

  // 7. Blocks instantiate a block type by using the oftype keyword.
  // The block type defines the available properties that the block
  // can use to specify the intended behavior of the block 
  block WordExtractor oftype HttpExtractor {

    // 8. Properties are assigned to concrete values.
    // Here, we specify the URL where the file shall be downloaded from.
    url: "https://thedocs.worldbank.org/en/doc/7d852628d96b9411d43e5d36d5dff941-0050062022/original/Graphs-Chapter-5-02082022.xlsx";
  }

   // 3. The incoming file is interpreted as a XLSX file and transformed into a Workbook
  // Workbooks contain at least 1 Sheet. Every sheet has a unique name. 
  block WordCellsTextXLSXInterpreter oftype XLSXInterpreter { }

  // 4.1 Here, we pick one sheet with the name 'RefractiveIndexSi GaAs' from the Workbook to use within our pipeline. 
  // The output type from SheetPicker is Sheet, which was already introduced in the cars example
  block WordCellsSheetpicker oftype SheetPicker {
    sheetName: 'Figure S5.1.2';
  }

  block WorldCellRangeSelector oftype CellRangeSelector {
    select: range P2:S45;
  }

block NameHeaderWriter oftype CellWriter {
    at: range A1:D1;
    write: [
      "Country Code",
      "Economy",
      "GDP per Capita",
      "Bond Issuance Share",
    ];
  }


  // 14. As a next step, we interpret the sheet as a table by adding structure.
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically. 
  block BondIssuanceTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "Country Code" oftype CountryCodeAlpha3,
      "Bond Issuance Share" oftype BIS,
    ];
  }

block GdpPerCapitaTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "Country Code" oftype CountryCodeAlpha3,
      "GDP per Capita" oftype PosDec,
    ];
  }
  
// 9. Below the pipeline, we model user-define value types.
// We give them a speaking name and provide a base value type
// that this value type builts on. User-defined value types always place additional constraints on existing value types.
valuetype PosDec oftype decimal  {
  // 10. Value types can be further refined by providing constraints.
  constraints: [
    PositiveDecimal,
  ];
}
valuetype BIS oftype decimal  {
  // 10. Value types can be further refined by providing constraints.
  constraints: [
    BetweenZO,
  ];
}

// 11. This constraint works on text value types and requires values 
// to match a given regular expression in order to be valid.
constraint PositiveDecimal on decimal: value > 0;
constraint BetweenZO on decimal: value >= 0 and value <= 1;


  // 15. As a last step, we load the table into a sink,
  // here into a sqlite file.
  // The structural information of the table is used
  // to generate the correct table.
  block GdpPerCapitaLoader oftype SQLiteLoader {
    table: "gdpPerCapita";
    file: "./country-stats.sqlite";
  }
   block bondIssuanceLoader oftype SQLiteLoader {
    table: "bondIssuance";
    file: "./country-stats.sqlite";
  }
}