// 1. This Jayvee model describes a pipeline 
// from a CSV file in the web 
// to a SQLite file sink.
pipeline TreePipeline {

  // 2. We describe the structure of the pipeline,
  // usually at the top of the pipeline.
  // by connecting blocks via pipes. 
  // 3. Syntax of a pipe
  // connecting the block CarsExtractor
  // with the block CarsTextFileInterpreter.
  // 4. The output of the preceding block is hereby used 
  // as input for the succeeding block.

  // 5. Pipes can be further chained, 
  // leading to an overview of the pipeline.
  TreeExtractor
    -> TreeTextFileInterpreter
    -> TreeCSVInterpreter
    -> TreeTableInterpreter
    -> TreeLoader;


  // 6. Below the pipes, we usually define the blocks 
  // that are connected by the pipes.

  // 7. Blocks instantiate a block type by using the oftype keyword.
  // The block type defines the available properties that the block
  // can use to specify the intended behavior of the block 
  block TreeExtractor oftype HttpExtractor {

    // 8. Properties are assigned to concrete values.
    // Here, we specify the URL where the file shall be downloaded from.
    url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
  }

  // 9. The HttpExtractor requires no input and produces a binary file as output.
  // This file has to be interpreted, e.g., as text file.
  block TreeTextFileInterpreter oftype TextFileInterpreter { }

  // 10. Next, we interpret the text file as sheet.
  // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
  block TreeCSVInterpreter oftype CSVInterpreter {
    delimiter: ';';
  }

  // 11. We can write into cells of a sheet using the CellWriter block type.


  // 14. As a next step, we interpret the sheet as a table by adding structure.
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically. 
  block TreeTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "lfd_nr" oftype integer,
      "stadtteil" oftype StadtTeil,
      "standort" oftype text,
      "baumart_botanisch" oftype text,
      "id" oftype Geopunkt,
      "baumfamilie" oftype text, 
    ];
  }
  
// 9. Below the pipeline, we model user-define value types.
// We give them a speaking name and provide a base value type
// that this value type builts on. User-defined value types always place additional constraints on existing value types.
valuetype StadtTeil oftype text {
  // 10. Value types can be further refined by providing constraints.
  constraints: [
    StartWithVogelsang,
  ];
}

// 11. This constraint works on text value types and requires values 
// to match a given regular expression in order to be valid.
constraint StartWithVogelsang on text: value matches /^Vogelsang/;

valuetype Geopunkt oftype text {
    constraints:[
        GeopunktConstraint,
    ];
}
constraint GeopunktConstraint on text: value matches /^[0-9]{1,3}.[0-9]*, [0-9]{1,3}.[0-9]*/;

  // 15. As a last step, we load the table into a sink,
  // here into a sqlite file.
  // The structural information of the table is used
  // to generate the correct table.
  block TreeLoader oftype SQLiteLoader {
    table: "trees";
    file: "./trees.sqlite";
  }

  // 16. Congratulations!
  // You can now use the sink for your data analysis, app, 
  // or whatever you want to do with the cleaned data.  
}